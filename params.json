{"name":"javaQuery","tagline":"The Java port of jQuery","body":"## javaQuery\r\n\r\n### Introduction\r\n\r\n__javaQuery__ is an Java *port* of [jQuery](https://github.com/jquery/jquery), and is designed to\r\nbe as syntactically alike as possible in Java. *javaQuery* is derived from my original Android port\r\n[droidQuery](http://bit.ly/droidquery).\r\n\r\nFor those not familiar with *jQuery*, it essentially provides magic for allowing the simultaneous\r\nmanipulation of a set of UI entities (using animations, attributes settings, etc), as well as to\r\nperform complex tasks, such as asynchronous network tasks. *javaQuery* can do all of these things.\r\n\r\nEssentially, *javaQuery* provides this same type of magic for the view hierarchy and `AsyncTasks`, and\r\ncan be used to perform other frequent jobs, such as showing alert messages. Also like *jQuery*, \r\n*javaQuery* allows the addition of extensions to add to the power of the library. A list of known \r\nextensions is available on the [wiki](https://github.com/phil-brown/javaQuery/wiki/known-extensions).\r\n\r\n### How to Include javaQuery in your Project\r\n\r\nThe simplest way to include *javaQuery* in your project is to copy the latest release jar\r\ninto your project's build path, and if building from the command line, to reference the jar\r\nin your *classpath*.\r\n\r\n### License\r\n\r\nCopyright 2013 Phil Brown\r\n\r\n*javaQuery* is licensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\r\n  [http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)\r\n\r\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\r\n### How to Use\r\n\r\n> Note: If you find any bugs or would like functionality that is missing, please create a new issue (https://github.com/phil-brown/javaQuery/issues).\r\n\r\nBelow are some of the most common tasks for which *javaQuery* can be used.\r\nA sample application can also be found in the `samples` directory. The relevant code can be found\r\nin [Example.java](https://github.com/phil-brown/javaQuery/blob/master/samples/javaQueryTest/src/Example.java).\r\nYou may also browse the *javadocs* [here](http://phil-brown.github.io/javaQuery/doc/).\r\nFinally, most of the [jQuery API Documentation](http://api.jquery.com) is sufficient to explain the *javaQuery* API.\r\n\r\nTo **instantiate** a new *droidQuery*, you need to pass in a `Component`, or set of `Component`s. The\r\nsimplest way to create the instance is using the `with` static methods:\r\n\r\n    $.with(Component);\r\n    $.with(List<Component>);\r\n    $.with(Component[]);\r\n    \r\nOnce you have the *javaQuery* instance, you can either save it as a variable, or chain calls to manipulate\r\nthe selected `Component` or `Component`s.\r\n\r\n**Ajax**\r\n\r\nTo perform an asynchronous network task, you can use *ajax*. The most straight-forward way to create and\r\nstart an ajax task is with the `$.ajax(AjaxOptions)` method. For example:\r\n\r\n    $.ajax(new AjaxOptions().url(\"http://www.example.com\")\r\n                            .type(\"GET\")\r\n                            .dataType(\"text\")\r\n                            .success(new Function() {\r\n                                @Override\r\n                                public void invoke($ javaQuery, Object... params) {\r\n                                    javaQuery.alert((String) params[0]);\r\n                                }\r\n                            }).error(new Function() {\r\n                                @Override\r\n                                public void invoke($ javaQuery, Object... params) {\r\n                                    int statusCode = (Integer) params[1];\r\n                                    String error = (String) params[2];\r\n                                    Log.e(\"Ajax\", statusCode + \" \" + error);\r\n                                }\r\n                            }));\r\n\r\n**Logging**\r\n\r\n*javaQuery* is packaged with an advanced logging library that uses ANSI to print formatted text. If your\r\nconsole does not support ANSI, it is recommended you either install a plug-in (such as [this one](http://mihai-nita.net/java/)\r\nfor *Eclipse*), or simply add this call to disable ANSI output:\r\n\r\n    Log.disableANSI();\r\n\r\n**Attributes**\r\n\r\n*javaQuery* can be used to get or change the attributes of its selected `Component`s. The most common\r\nmethods include `attr()` to get an attribute, `attr(String, Object)` to set an attribute, `val()` to\r\nget the value of a UI element (such as `String` for `JLabel`s, etc), and `val(Object)` to set the value.\r\n\r\n**Callbacks**\r\n\r\nThe *Callbacks* Object provides a simple way to manage and fire sets of callbacks. To get an instance\r\nof this Object, use `$.Callbacks()`.\r\n\r\n**Effects**\r\n\r\n*javaQuery* can be used to animate the selected `Component`s. The simplest way to perform a custom animation\r\nis by using the `animate(String, long, Easing, Function)` method. For example:\r\n\r\n    $.with(myComponent).children().animate(\"{left: 100px, top: 100, width: 50%, height: 50% }\", 400, Easing.LINEAR, new Function() {\r\n    \t@Override\r\n    \tpublic void invoke($ javaQuery, Object... params)\r\n    \t{\r\n    \t\tLog.info(\"animation complete\");\r\n    \t}\r\n    });\r\n\r\nIt can also be used to perform pre-configured animations, such as fades (using `fadeIn`, `fadeOut`, \r\n`fadeTo`, and `fadeToggle`) and slides (`slideUp`, `slideDown`, `slideLeft`, and `slideRight`).\r\n\r\n**Events**\r\n\r\n*javaQuery* can be used to register for notification Strings sent by other objects. For example:\r\n\r\n    //Register for a notification (one of several methods)\r\n    $.make().listenTo(\"print\", new Function() {\r\n\t\t@Override\r\n\t\tpublic void invoke($ javaQuery, Object... params) {\r\n\t\t    String message = \"\";\r\n\t\t\tif (params != null && params.length > 0)\r\n\t\t\t{\r\n\t\t\t\tif (params[0] instanceof Map) {\r\n\t\t\t\t\tMap map = (Map) params[0];\r\n\t\t\t\t\tif (map.containsKey(\"message\"))\r\n\t\t\t\t\t\tmessage = (String) map.get(\"message\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tLog.i(\"Printer\", message);\r\n\t\t}\r\n    });\r\n    \r\n    //send a notification\r\n    $.make().notify(\"print\", $.map($.entry(\"message\", \"this is a message\"));\r\n\r\n**Selectors**\r\n\r\nThe real magic behind *javaQuery* is its ability to manipulate a set of UI elements at one instance.\r\na `Component` or a set of `Components`s can be passed to a *javaQuery* instance using any of the *with* methods,\r\nor a new instance of *javaQuery* containing a set of *Component*s can be created using any of the selector\r\nmethods, including `view`, `child`, `parent`, `children`, `siblings`, `slice`, `selectAll`, `selectByType`,\r\n`selectChildren`, `selectEmpties`, `selectFocused`, `selectHidden`, `selectVisible`, `id`, `selectComponentWithName`\r\n`selectOnlyChilds`, and `selectParents`, among others.\r\n\r\n**Miscellaneous**\r\n\r\n*javaQuery* also comes with several methods that simplify a lot of common tasks. including:\r\n\r\n* __map(String)/map(JSONObject)__ - converts a JSON String or a JSONObject to a Map Object\r\n* __map(Entry...)__ - quickly make a Map Object\r\n* __entry(String, Object)__ - quickly make a Map Entry Object\r\n* __alert__ - show an alert dialog\r\n* __write__ - write text to a file\r\n* __parseJSON__ - parses a JSON string and returns a JSONObject\r\n* __parseXML__ - parses an XML string and returns a Document Object\r\n\r\n\r\n**A note about Scripts**\r\n\r\nIn *jQuery*, there is an `Ajax` type called `Script`, which can be used to download a `Javascript` file.\r\nThis type also exists in *javaQuery*, but instead of `Javascript`, it expects a command-line script, which\r\nis run in a Java process. A request may likely look like this:\r\n\r\n    $.ajax(\"{url: 'http://www.example.com/settings', type: 'post', dataType: 'script', data: '{id: 4, setting: 1}' }\");\r\n    \r\nand as long as the request was successful, the script that responds will be run automatically.\r\n\r\nIf the script calculates some data, the response would include the script output.\r\n\r\n**Special Thanks**\r\n\r\nThis project uses *org.jdesktop* for core animations. This project was written by *Tim Halloran*,\r\nand *Chet Haase*.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}